/************************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU General Public License          *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.lnd.wrapper;

import io.grpc.ManagedChannel;
import io.grpc.stub.StreamObserver;
import io.netty.handler.ssl.SslContext;
import org.lightningj.lnd.proto.*;
import org.lightningj.lnd.wrapper.message.*;
import org.lightningj.lnd.wrapper.message.NewAddressRequest.AddressType;

import javax.net.ssl.SSLException;
import java.io.File;
import java.util.Map;

/**
 * API Class for generating ${type} API calls to LDN server using wrapped objects.
 *
 * Created by Philip Vendil.
 */
public class ${apiClassName} extends ${apiType}{

    private ${grpcClass}.${stubClass} stub=null;

    /**
     * Minimal constructor for setting up a connection with LND Application.
     *
     * @param host                     the hostname of ldn application
     * @param port                     the port of the application.
     * @param trustedServerCertificate a link of the SSL certificate used by the LND Application.
     * @throws SSLException if problems occurred setting up the SSL Connection.
     */
    public ${apiClassName}(String host, int port, File trustedServerCertificate) throws SSLException {
        super(host,port,trustedServerCertificate);
    }

    /**
     * Constructor for setting up a connection with LND Application with more flexible
     * SSL context parameters.
     *
     * @param host       the hostname of ldn application
     * @param port       the port of the application.
     * @param sslContext the SSL Context used when connecting the LND Application.
     */
    public ${apiClassName}(String host, int port, SslContext sslContext){
        super(host,port,sslContext);
    }

    /**
     * Constructor used for setting up a connection using a GRPC managed channel that
     * can be customized.
     *
     * @param channel the managed channel to use.
     */
    public ${apiClassName}(ManagedChannel channel){
        super(channel);
    }

    ${callMethods}

    protected ${grpcClass}.${stubClass} getStub(){
        if(stub == null){
            stub = ${grpcClass}.${newStubMethodName}(channel);
        }
        return stub;
    }

}
