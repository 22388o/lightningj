/************************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public License   *
 *  (LGPL-3.0-or-later)                                                  *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.lnd.wrapper.message;

import org.lightningj.lnd.proto.LightningApi;

import javax.json.JsonReader;
import javax.json.JsonException;
import org.lightningj.lnd.wrapper.*;
import com.google.protobuf.ByteString;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import javax.xml.bind.annotation.*;


/**
 * Wrapper class for ${className}.
 *
 *
 * @see org.lightningj.lnd.wrapper.Message
 * @see org.lightningj.lnd.proto.LightningApi.${className}
 * Written by Philip Vendil
 */
@XmlRootElement(name = "${className}")
${xmlType}
public class ${className} extends ${messageType}<LightningApi.${className}> {

${innerEnums}
${fields}

    /**
     * Empty Constructor
     */
    public ${className}(){
        super(LightningApi.${className}.newBuilder());
    }

    /**
     * Json Parsing Constructor
     *
     * @throws JsonException if problems was found with the supplied JSON data.
     */
    public ${className}(JsonReader jsonReader) throws JsonException{
        super(jsonReader, LightningApi.${className}.newBuilder());
    }

    /**
     * Constructor using underlying Lightning API Object
     */
    public ${className}(LightningApi.${className} apiObject){
        super(apiObject.toBuilder());
    }

    /**
     * @return the underlying Lightning API Object Builder.
     */
    @XmlTransient
    LightningApi.${className}.Builder getBuilder(){
        return (LightningApi.${className}.Builder) builder;
    }

${getterAndSetters}

${innerClasses}

${populateRepeatableFields}

}
