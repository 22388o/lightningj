
    /**
     * Returns ${fieldJsonName} as a detached map. I.e. modifications in returned map
     * does not affect data in object. A new map is created for each call.
     */
    @XmlTransient
    public Map<${fieldKeyType},${fieldValueType}> get${fieldJavaName}AsDetachedMap() {
        Map<${fieldKeyType},${fieldValueType}> retval = new HashMap<>();

        for(${fieldJavaName}Entry entry : get${fieldJavaName}Entries().getEntry()){
          retval.put(entry.key,entry.value);
        }

        return retval;
    }

    /**
     * Populates ${fieldJsonName} with all the values in the map.
     */
    @XmlTransient
    public void set${fieldJavaName}(Map<${fieldKeyType},${fieldValueType}>  valueMap) {
         if(${fieldName}Entries == null){
           ${fieldName}Entries = new ${fieldJavaName}Entries();
         }else{
           ${fieldName}Entries.getEntry().clear();
         }
         for(${fieldKeyType} key : valueMap.keySet()){
           ${fieldName}Entries.getEntry().add(new ${fieldJavaName}Entry(key, valueMap.get(key)));
         }
    }

    /**
     * Gets the map entries as a wrapped list, used for XML conversion.
     *
     *
     */
    ${xmlElement}
    public ${className}.${fieldJavaName}Entries get${fieldJavaName}Entries() {
        if(${fieldName}Entries == null){
           ${fieldName}Entries = new ${className}.${fieldJavaName}Entries();
           Map<${fieldKeyApiType}, ${fieldValueApiType}> builderMap = ((${apiClassName}.${className}.Builder) builder).get${fieldJavaName}Map();
           for(Map.Entry<${fieldKeyApiType}, ${fieldValueApiType}> entry : builderMap.entrySet()){
              ${fieldName}Entries.getEntry().add(new ${fieldJavaName}Entry(${fieldKeyGetEntry},${fieldValueGetEntry}));
           }
        }
        return ${fieldName}Entries;
    }

    /**
     * Sets a wrapped list of entries, used for XML conversion.
     *
     */
    public void set${fieldJavaName}Entries(${className}.${fieldJavaName}Entries entries) {
        this.${fieldName}Entries = entries;
    }